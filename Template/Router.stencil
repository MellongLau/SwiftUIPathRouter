import SwiftUI

extension Router {
    enum Route: Hashable, Identifiable {
        static func == (lhs: Router.Route, rhs: Router.Route) -> Bool {
            lhs.id == rhs.id
        }
        
        // sourcery:inline:autoRouteCases
        {% for type in types.all where type.annotations.route %}
        case {{ type.name|lowerFirstWord |replace:"View", "" }}{% if type.variables|annotated:"parameterized"|count > 0 %}({% for variable in type.variables where variable.annotations.parameterized %}{{ variable.name }}: {{ variable.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}
        {% endfor %}

        init?(rawValue: String, parameters: [String: Any]? = nil) {
            switch rawValue {
            {% for type in types.all where type.annotations.route and type.based["ObservableObject"] == nil and type.name|hasSuffix:"View" %}
            case "{{ type.name| lowerFirstWord |replace:"View", "" }}":
                {% if type.variables|annotated:"parameterized"|count > 0 %}
                guard let parameters,
                    {% for variable in type.variables where variable.annotations.parameterized %}
                    let {{ variable.name }} = parameters["{{ variable.name }}"] as? {{ variable.typeName }}{% if not forloop.last %}, {% endif %}
                    {% endfor %}
                        else { return nil }
                {% endif %}
                self = .{{ type.name| lowerFirstWord |replace:"View", "" }}{% if type.variables|annotated:"parameterized"|count > 0 %}({% for variable in type.variables where variable.annotations.parameterized %}{{ variable.name }}: {{ variable.name }}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}
            {% endfor %}
            default:
                return nil
            }
        }

        func hash(into hasher: inout Hasher) {
            switch self {
            
            case {% for type in types.all where type.annotations.route and type.based["ObservableObject"] == nil and type.name|hasSuffix:"View" %}.{{ type.name| lowerFirstWord |replace:"View", "" }}{% if not forloop.last %}, {% endif %}{% endfor %}:
                hasher.combine(self.id)
            }
        }

        // Identifiable conformance
        var id: String {
            switch self {
            {% for type in types.all where type.annotations.route and type.based["ObservableObject"] == nil and type.name|hasSuffix:"View" %}
            case .{{ type.name| lowerFirstWord |replace:"View", "" }}{% if type.variables|annotated:"parameterized"|count > 0 %}({% for variable in type.variables where variable.annotations.parameterized %}_{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}:
                return "{{ type.name| lowerFirstWord |replace:"View", "" }}"
            {% endfor %}
            }
        }
        // sourcery:end
    }
}


// Router or other navigation handler will use this extension to create views from the routes
extension Router {

    @ViewBuilder func view(for route: Route, type: NavigationType) -> some View {
        // sourcery:inline:AutoGeneratedViewBuilder
        switch route {
        {% for type in types.all where type.annotations.route %}
        case .{{ type.name|lowerFirstWord |replace:"View", "" }}{% if type.variables|annotated:"parameterized"|count > 0 %}({% for variable in type.variables where variable.annotations.parameterized %}let {{ variable.name }}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}:
            {{ type.name }}(
                router: self.router(navigationType: type){% if type.variables|annotated:"parameterized"|count > 0 %}, {% endif %}
                {% for variable in type.variables where variable.annotations.parameterized %}
                {{ variable.name }}: {{ variable.name }}{% if not forloop.last %}, {% endif %}
                
                {% endfor %}
            )
        {% endfor %}
        }
        // sourcery:end
    }
}